{"version":3,"sources":["js/foundation.js","tsp-board/TspBoardConst.js","components/Panel.jsx","components/points.jsx","js/Life.js","js/GA.js","js/TSP.js","tsp-board/TspBoard.jsx","App.js","index.js"],"names":["getRandom","randomArray","Math","floor","random","sort","shuffle","arr","i","length","j","wait","ms","Promise","resolve","setTimeout","getLines","temp","forEach","item","index","push","x1","x","y1","y","x2","y2","stroke","fill","TspBoardStatus","Panel","isResult","points","lines","addPoint","keyName","style","margin","onClick","e","className","border","width","height","map","cx","cy","r","strokeWidth","Points","distance","element","Life","gene","this","Array","isArray","slice","rndGene","score","n","_","idx","v","join","GA","options","x_rate","mutation_rate","life_count","gene_length","mutation_count","generation","lives","scores","best","rate","xFunc","mFunc","last_best_score","lf","setScore","p1","p2","l","bear","getOne","doRate","new_lives","newChild","TSP","onstart","onstop","nodes","orders","is_running","_onstart","_onstop","ga","bind","getDistance","lf1","lf2","piece","new_gene","concat","includes","funcs","g","t","reverse","splice","order","d","reduce","a","b","sqrt","pow","refreshStates","last_best_gen","next","stop","console","log","refreshStatu","run","TspBoard","useState","start","setStart","setPoints","setLines","setDistance","tsp","useMemo","info","number","getLinesByOrders","nativeEvent","offsetX","offsetY","city","prepareNodesAndGA","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fdc8b0d.chunk.js","sourcesContent":["export function getRandom() {\r\n    let a = 20,\r\n        b = 230,\r\n        c = Math.floor(Math.random() * 255);\r\n\r\n    function randomSort() {\r\n        return Math.random() < 0.5 ? -1 : 1;\r\n    }\r\n    let randomArray = [a, b, c].sort(randomSort);\r\n    let output = `rgb(${randomArray[0]},${randomArray[1]},${randomArray[2]})`;\r\n    return output;\r\n}\r\n\r\n/**打乱顺序 */\r\nexport function shuffle(arr) {\r\n    let i = arr.length\r\n    while (i) {\r\n        let j = Math.floor(Math.random() * i--);\r\n        [arr[j], arr[i]] = [arr[i], arr[j]]\r\n    }\r\n\r\n    return arr\r\n}\r\n\r\nexport const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n\r\nexport function getLines(arr) {\r\n    let temp = []\r\n    arr.forEach((item, index) => {\r\n        temp.push({\r\n            x1: arr[index].x,\r\n            y1: arr[index].y,\r\n            x2: index === arr.length - 1 ? arr[0].x : arr[index + 1].x,\r\n            y2: index === arr.length - 1 ? arr[0].y : arr[index + 1].y,\r\n            stroke: item.fill\r\n        })\r\n    })\r\n    return temp\r\n}\r\n\r\nexport function getLinesByOrders(points, orders) {\r\n    let temp = []\r\n    temp = orders.map((number, index) => {\r\n        return points[number]\r\n    })\r\n    temp = getLines(temp)\r\n    return temp\r\n}\r\n","import {\r\n    getRandom\r\n} from \"../js/foundation\";\r\nexport const TspBoardStatus = {\r\n    start: false,\r\n    combinations: 0,\r\n    estimatedTime: 0,\r\n    points: [],\r\n    lines: [],\r\n    distance: 0\r\n};\r\n","import React, { useRef } from \"react\";\r\nexport default function Panel({ isResult, points, lines, addPoint }) {\r\n    const keyName = isResult ? 'result' : 'process'\r\n    return (\r\n        <div>\r\n            <p style={{ margin: \"0\" }}>{keyName}</p>\r\n            <svg\r\n                onClick={isResult ? null : (e) => { addPoint(e) }}\r\n                className=\"rect\"\r\n                style={{ border: \"1px solid black\" }}\r\n                width=\"200\"\r\n                height=\"200\"\r\n            >\r\n                {points.map((item) => {\r\n                    return (\r\n                        <circle\r\n                            cx={item.x}\r\n                            cy={item.y}\r\n                            key={item.x + item.y + item.fill + keyName}\r\n                            r=\"5\"\r\n                            fill={item.fill}\r\n                        ></circle>\r\n                    );\r\n                })}\r\n                {lines.map((item) => {\r\n                    return (\r\n                        <line\r\n                            x1={item.x1}\r\n                            y1={item.y1}\r\n                            x2={item.x2}\r\n                            y2={item.y2}\r\n                            stroke={item.stroke}\r\n                            key={item.x1 + item.y1 + item.x2 + item.y2 + item.stroke + keyName}\r\n                            strokeWidth=\"2\" >\r\n                        </line>\r\n                    );\r\n                })}\r\n\r\n            </svg>\r\n        </div >\r\n    );\r\n}\r\n","import \"./points.css\";\r\nexport default function Points({ points, distance }) {\r\n    return (\r\n        <div>\r\n            <h3>Points ({points.length}))</h3>\r\n            <div style={{ width: \"300px\" }}>\r\n                {points.map((element, index) => {\r\n                    return (\r\n                        <div className=\"point-block\"\r\n                            key={element.x + element.y + element.fill}>\r\n                            x:{element.x} y:{element.y}\r\n                        </div>\r\n                    );\r\n                })}\r\n                <div>Route length:{distance}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * Life.js\r\n */\r\n\r\n'use strict'\r\n\r\nimport {\r\n    shuffle\r\n} from '../js/foundation'\r\n// 个体\r\nexport default class Life {\r\n    // 基因\r\n    constructor(gene = 100) {\r\n        this.gene = Array.isArray(gene) ? gene.slice(0) : this.rndGene(gene)\r\n        this.score = 0\r\n    }\r\n\r\n    rndGene(n) {\r\n        return shuffle((new Array(n)).fill(0).map((_, idx) => idx))\r\n    }\r\n\r\n    setScore(v) {\r\n        this.score = v\r\n    }\r\n\r\n    toString() {\r\n        return this.gene.join('-')\r\n    }\r\n}\r\n","/**\r\n * GA.js\r\n */\r\n\r\n'use strict'\r\n\r\nimport Life from './Life'\r\n\r\nexport default class GA {\r\n    constructor(options) {\r\n        /** 适应度 */\r\n        this.x_rate = options.x_rate || 0.7\r\n        /** 突变几率 */\r\n        this.mutation_rate = options.mutation_rate || 0.005\r\n        /** 个体数量*/\r\n        this.life_count = options.life_count || 50\r\n        /** 基因长度 */\r\n        this.gene_length = options.gene_length || 100\r\n        /** 突变数量 */\r\n        this.mutation_count = 0\r\n        /** 迭代数量 */\r\n        this.generation = 0\r\n        this.lives = []\r\n        this.scores = 0 // 总得分\r\n        this.best = null\r\n\r\n        this.rate = options.rate\r\n        this.xFunc = options.xFunc\r\n        this.mFunc = options.mFunc\r\n\r\n        for (let i = 0; i < this.life_count; i++) {\r\n            this.lives.push(new Life(this.gene_length))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据传入的方法，计算每个个体的得分\r\n     */\r\n    doRate() {\r\n        //let last_avg = this.scores / this.life_count\r\n        this.scores = 0\r\n        let last_best_score = -1\r\n\r\n        this.lives.map(lf => {\r\n            lf.setScore(this.rate(lf.gene))\r\n            if (lf.score > last_best_score) {\r\n                last_best_score = lf.score\r\n                this.best = lf\r\n            }\r\n            this.scores += lf.score\r\n        })\r\n    }\r\n\r\n    bear(p1, p2) {\r\n        // 根据父母 p1, p2 生成一个后代\r\n        let gene\r\n        if (Math.random() < this.x_rate) {\r\n            // 交叉\r\n            gene = this.xFunc(p1, p2)\r\n        } else {\r\n            gene = p1.gene.slice(0)\r\n        }\r\n\r\n        if (Math.random() < this.mutation_rate) {\r\n            // 突变\r\n            gene = this.mFunc(gene)\r\n            this.mutation_count++\r\n        }\r\n\r\n        return new Life(gene)\r\n    }\r\n\r\n    getOne() {\r\n        // 根据得分情况，随机取得一个个体，机率正比于个体的score属性\r\n        let {\r\n            scores,\r\n            lives\r\n        } = this\r\n        let r = Math.random() * scores\r\n\r\n        for (let i = 0, l = lives.length; i < l; i++) {\r\n            let lf = lives[i]\r\n            r -= lf.score\r\n            if (r <= 0) {\r\n                return lf\r\n            }\r\n        }\r\n    }\r\n\r\n    newChild() {\r\n        return this.bear(this.getOne(), this.getOne())\r\n    }\r\n\r\n    next() {\r\n        this.generation++\r\n\r\n        this.doRate()\r\n        let new_lives = []\r\n        new_lives.push(this.best) // 将最好的父代加入竞争\r\n        new_lives.push(new Life(this.gene_length)) // 加入一个随机值\r\n        while (new_lives.length < this.life_count) {\r\n            new_lives.push(this.newChild())\r\n        }\r\n        this.lives = new_lives\r\n\r\n        //console.log(this.best.score)\r\n        return this.best.gene.slice(0)\r\n    }\r\n}\r\n","/**\r\n * TSP.js\r\n */\r\n\r\n'use strict'\r\n\r\nimport {\r\n    shuffle,\r\n    wait\r\n} from './foundation'\r\nimport GA from './GA'\r\n\r\nexport default class TSP {\r\n    constructor(onstart, onstop) {\r\n        // 种群\r\n        this.nodes = []\r\n\r\n        this.orders = []\r\n        this.r = 4\r\n        this.mutation_rate = 0.05\r\n        this.is_running = false\r\n\r\n        this._onstart = onstart\r\n        this._onstop = onstop\r\n    }\r\n\r\n    // 传入城市信息\r\n    prepareNodesAndGA(nodes = [], life_count = 100) {\r\n        this.is_running = false\r\n        this.n = nodes.length;\r\n        /** 个头数量，为节点数量的两倍 */\r\n        this.life_count = life_count;\r\n        /** 个体详细信息 [{x:123,y:123},{x:223,y:223},...]*/\r\n        this.nodes = []\r\n        /** 基因序列 [1,2,3,4...]*/\r\n        this.orders = []\r\n\r\n        nodes.forEach((item, index) => {\r\n            this.nodes.push(item);\r\n            this.orders.push(index)\r\n        })\r\n\r\n        shuffle(this.orders)\r\n        /** 基因序列首尾相连 */\r\n        this.orders.push(this.orders[0])\r\n\r\n        /** 遗传算法类，封装种群数量，突变几率，基因长度，计算适应度，交换，变异方法 */\r\n        this.ga = new GA({\r\n            life_count: this.life_count,\r\n            mutation_rate: this.mutation_rate,\r\n            gene_length: this.n,\r\n            rate: this.rate.bind(this),\r\n            xFunc: this.xFunc.bind(this),\r\n            mFunc: this.mFunc.bind(this)\r\n        })\r\n    }\r\n\r\n    rate(gene) {\r\n        return 1 / this.getDistance(gene)\r\n    }\r\n\r\n    /**父代交换基因，生成新基因 */\r\n    xFunc(lf1, lf2) {\r\n        let p1 = Math.floor(Math.random() * (this.n - 2)) + 1\r\n        let p2 = Math.floor(Math.random() * (this.n - p1)) + p1\r\n        let piece = lf2.gene.slice(p1, p2)\r\n        let new_gene = lf1.gene.slice(0, p1)\r\n        piece.concat(lf2.gene).map(i => {\r\n            if (!new_gene.includes(i)) {\r\n                new_gene.push(i)\r\n            }\r\n        })\r\n\r\n        return new_gene\r\n    }\r\n\r\n    /**个体基因突变 */\r\n    mFunc(gene) {\r\n        let p1 = 0\r\n        let p2 = 0\r\n        let n = gene.length\r\n        while (p1 === p2) {\r\n            p1 = Math.floor(Math.random() * n)\r\n            p2 = Math.floor(Math.random() * n)\r\n        }\r\n        if (p1 > p2) {\r\n            [p1, p2] = [p2, p1]\r\n        }\r\n\r\n        let funcs = [\r\n            (g, p1, p2) => {\r\n                // 交换\r\n                let t = g[p1]\r\n                g[p1] = g[p2]\r\n                g[p2] = t\r\n            }, (g, p1, p2) => {\r\n                // 倒序\r\n                let t = g.slice(p1, p2).reverse()\r\n                g.splice(p1, p2 - p1, ...t)\r\n            }, (g, p1, p2) => {\r\n                // 移动\r\n                let t = g.splice(p1, p2 - p1)\r\n                g.splice(Math.floor(Math.random() * g.length), 0, ...t)\r\n            }\r\n        ]\r\n\r\n        let r = Math.floor(Math.random() * funcs.length)\r\n        funcs[r](gene, p1, p2)\r\n\r\n        return gene\r\n    }\r\n\r\n    /**\r\n     * 得到当前顺序下连线的总长度\r\n     */\r\n    getDistance(order = null) {\r\n        let d = 0\r\n        let {\r\n            nodes\r\n        } = this\r\n        order.concat(order[0]).reduce((a, b) => {\r\n            d += Math.sqrt(Math.pow(nodes[a].x - nodes[b].x, 2) + Math.pow(nodes[a].y - nodes[b].y, 2))\r\n            //d += Math.hypot(nodes[a].x - nodes[b].x, nodes[a].y - nodes[b].y)\r\n            return b\r\n        })\r\n        return d\r\n    }\r\n\r\n    async run(refreshStates) {\r\n        let last_best_score = -1\r\n        let last_best_gen = 0\r\n\r\n        while (this.is_running) {\r\n            this.orders = this.ga.next()\r\n\r\n            let {\r\n                best,\r\n                generation\r\n            } = this.ga\r\n\r\n            if (last_best_score !== best.score) {\r\n                last_best_score = best.score\r\n                last_best_gen = generation\r\n            } else if (generation - last_best_gen >= 5000) {\r\n                // 超过 n 代没有更好的结果，自动结束\r\n                this.stop()\r\n                break\r\n            }\r\n\r\n            if (this.ga.generation % 10 === 0) {\r\n                console.log(this.orders)\r\n                console.log(best)\r\n            }\r\n            refreshStates({\r\n                orders: this.orders,\r\n                distance: best.score\r\n            })\r\n            await wait(1)\r\n        }\r\n    }\r\n\r\n    start(refreshStatu) {\r\n        this.is_running = true\r\n        this.run(refreshStatu)\r\n        if (typeof this._onstart === 'function') {\r\n            this._onstart()\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        this.is_running = false\r\n\r\n        if (typeof this._onstop === 'function') {\r\n            this._onstop()\r\n        }\r\n    }\r\n}\r\n","import \"./TspBoard.css\";\r\nimport React, { useState, useMemo } from \"react\";\r\nimport { TspBoardStatus } from \"./TspBoardConst\";\r\nimport Panel from \"../components/Panel\";\r\nimport Points from \"../components/points\";\r\nimport { getRandom, getLines, getLinesByOrders } from '../js/foundation'\r\nimport TSP from '../js/TSP'\r\nexport default function TspBoard() {\r\n    const [start, setStart] = useState(TspBoardStatus.start);\r\n    const [combinations, setCombinations] = useState(\r\n        TspBoardStatus.combinations\r\n    );\r\n    const [points, setPoints] = useState(TspBoardStatus.points);\r\n    const [lines, setLines] = useState(TspBoardStatus.lines);\r\n    const [distance, setDistance] = useState(TspBoardStatus.distance);\r\n    const addPoint = (e) => {\r\n        setPoints([...points, { x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY, city: points.length + 1, fill: getRandom() }])\r\n    }\r\n    const tsp = useMemo(\r\n        () => {\r\n            return new TSP(() => { }, () => { })\r\n        }, [])\r\n\r\n    const refreshStatu = (info) => {\r\n        setLines(getLinesByOrders(points, info.orders));\r\n        setDistance(tsp.getDistance(info.orders))\r\n    }\r\n\r\n    const getResult = (e) => {\r\n        if (start) {\r\n            setStart(false)\r\n            tsp.stop()\r\n        } else {\r\n            setStart(true)\r\n            tsp.prepareNodesAndGA(points, 100)\r\n            setLines(getLines(points));\r\n            tsp.start(refreshStatu)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"tsp-board-container\">\r\n            <div className=\"board-container\">\r\n                {/* <p>Combinations:</p>\r\n                <p>Estimated time:</p> */}\r\n                <div className=\"panel-container\">\r\n                    <Panel isResult={false} points={points} lines={lines} addPoint={addPoint}></Panel>\r\n                    <div style={{ width: \"2vw\" }}></div>\r\n                    <Panel isResult={true} points={points} lines={lines}></Panel>\r\n                </div>\r\n                <button className=\"handle-button\" onClick={(e) => { getResult(e) }}>{start ? 'stop' : 'start'}</button>\r\n            </div>\r\n            <Points points={points} distance={distance}></Points>\r\n        </div>\r\n    );\r\n}\r\n","import { memo } from \"react\";\r\nimport TspBoard from \"./tsp-board/TspBoard\";\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <TspBoard></TspBoard>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}